from tkinter import *
import tkinter.messagebox as messagebox
import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
import statistics
from datetime import datetime
import users_db
from users_db import SqliteDB

class EditMonthlyDataWindow:
    def __init__(self, parent, abonent_id, month, year, data, on_save_callback):
        self.root = ctk.CTkToplevel(parent)
        self.root.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π")
        self.root.geometry("500x600")
        
        self.abonent_id = abonent_id
        self.month = month
        self.year = year
        self.data = data
        self.on_save_callback = on_save_callback
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö –∞–±–æ–Ω–µ–Ω—Ç–∞
        db = SqliteDB()
        self.abonent_data = db.get_abonent_by_id(self.abonent_id)
        db.close_connection()
        
        if not self.abonent_data:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞",
                         icon="cancel")
            self.root.destroy()
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkScrollableFrame(self.root)
        self.main_frame.pack(fill=BOTH, expand=True, padx=20, pady=20)
        
        self.draw_widgets()
        self.grab_focus()
        
    def grab_focus(self):
        self.root.grab_set()
        self.root.focus_set()
        self.root.wait_window()
        
    def draw_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(self.main_frame)
        title_frame.pack(fill=X, pady=(0, 20))
        ctk.CTkLabel(title_frame, 
                    text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –∑–∞ {self.month}/{self.year}",
                    font=("Roboto", 20, "bold")).pack(pady=10)
        
        # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
        self.entries = {}
        
        if self.abonent_data[7]:  # uses_electricity
            self.entries['electricity'] = self.create_entry_field("‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", self.data.get('electricity'))
            
        if self.abonent_data[8]:  # uses_water
            self.entries['water'] = self.create_entry_field("üíß –í–æ–¥–∞", self.data.get('water'))
            
        if self.abonent_data[9]:  # uses_wastewater
            self.entries['wastewater'] = self.create_entry_field("üö∞ –í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ", self.data.get('wastewater'))
            
        if self.abonent_data[10]:  # uses_gas
            self.entries['gas'] = self.create_entry_field("üî• –ì–∞–∑", self.data.get('gas'))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(self.main_frame)
        button_frame.pack(side=BOTTOM, fill=X, pady=20)
        
        ctk.CTkButton(button_frame, 
                     text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                     font=("Roboto", 12),
                     height=40,
                     command=self.save_data).pack(side=LEFT, padx=20, pady=5)
        
        ctk.CTkButton(button_frame, 
                     text="‚ùå –û—Ç–º–µ–Ω–∞",
                     font=("Roboto", 12),
                     height=40,
                     fg_color="transparent",
                     border_width=2,
                     command=self.root.destroy).pack(side=LEFT, padx=20, pady=5)
        
    def create_entry_field(self, label_text, value):
        frame = ctk.CTkFrame(self.main_frame)
        frame.pack(fill=X, pady=10)
        
        ctk.CTkLabel(frame, 
                    text=label_text,
                    font=("Roboto", 14)).pack(side=LEFT, padx=10)
        
        entry = ctk.CTkEntry(frame,
                           width=200,
                           height=35,
                           font=("Roboto", 12))
        if value is not None:
            entry.insert(0, str(value))
        entry.pack(side=RIGHT, padx=10)
        return entry
        
    def save_data(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
            electricity = float(self.entries['electricity'].get()) if 'electricity' in self.entries and self.entries['electricity'].get() else None
            water = float(self.entries['water'].get()) if 'water' in self.entries and self.entries['water'].get() else None
            wastewater = float(self.entries['wastewater'].get()) if 'wastewater' in self.entries and self.entries['wastewater'].get() else None
            gas = float(self.entries['gas'].get()) if 'gas' in self.entries and self.entries['gas'].get() else None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            db = SqliteDB()
            db.update_monthly_data(self.abonent_id, self.month, self.year,
                                 electricity, water, wastewater, gas)
            db.close_connection()
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            if self.on_save_callback:
                self.on_save_callback()
                
            self.root.destroy()
            CTkMessagebox(title="–£—Å–ø–µ—Ö", 
                         message="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                         icon="check")
            
        except ValueError:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —á–∏—Å–ª–∞–º–∏.",
                         icon="cancel")
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                         icon="cancel")

class SelectMonthWindow:
    def __init__(self, parent, abonent_id, on_select_callback):
        self.root = ctk.CTkToplevel(parent)
        self.root.title("–í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.root.geometry("500x600")
        
        self.abonent_id = abonent_id
        self.on_select_callback = on_select_callback
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkScrollableFrame(self.root)
        self.main_frame.pack(fill=BOTH, expand=True, padx=20, pady=20)
        
        self.draw_widgets()
        self.load_data()
        self.grab_focus()
        
    def grab_focus(self):
        self.root.grab_set()
        self.root.focus_set()
        self.root.wait_window()
        
    def draw_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(self.main_frame)
        title_frame.pack(fill=X, pady=(0, 20))
        ctk.CTkLabel(title_frame, 
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    font=("Roboto", 20, "bold")).pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞
        self.list_frame = ctk.CTkScrollableFrame(self.main_frame)
        self.list_frame.pack(fill=BOTH, expand=True, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ctk.CTkButton(self.main_frame, 
                     text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                     font=("Roboto", 12),
                     height=40,
                     fg_color="transparent",
                     border_width=2,
                     command=self.root.destroy).pack(pady=10)
        
    def load_data(self):
        try:
            db = SqliteDB()
            data = db.get_all_monthly_data(self.abonent_id)
            db.close_connection()
            
            if not data:
                ctk.CTkLabel(self.list_frame, 
                           text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                           font=("Roboto", 12)).pack(pady=10)
                return
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
            data.sort(key=lambda x: (x[3], x[2]), reverse=True)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
            for record in data:
                month, year = record[2], record[3]
                values = {
                    'electricity': record[4],
                    'water': record[5],
                    'wastewater': record[6],
                    'gas': record[7]
                }
                
                button_text = f"üìÖ {month}/{year}"
                details = []
                if values['electricity'] is not None:
                    details.append(f"‚ö° {values['electricity']}")
                if values['water'] is not None:
                    details.append(f"üíß {values['water']}")
                if values['wastewater'] is not None:
                    details.append(f"üö∞ {values['wastewater']}")
                if values['gas'] is not None:
                    details.append(f"üî• {values['gas']}")
                
                if details:
                    button_text += f" ({', '.join(details)})"
                
                button = ctk.CTkButton(
                    self.list_frame,
                    text=button_text,
                    font=("Roboto", 12),
                    height=40,
                    command=lambda m=month, y=year, v=values: self.select_month(m, y, v)
                )
                button.pack(fill=X, pady=5, padx=10)
                
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                         icon="cancel")
            
    def select_month(self, month, year, values):
        self.on_select_callback(month, year, values)
        self.root.destroy()

class MonthlyDataWindow:
    def __init__(self, parent, width, height, abonent_id, title="–£—á–µ—Ç –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –ê–û_–ö–æ—Ä–º–º–∞—à",
                 resizable=(False, False), icon='image/korm.ico'):
        self.root = ctk.CTkToplevel(parent)
        self.root.title(title)
        self.root.geometry(f"{width}x{height}")
        self.root.resizable(resizable[0], resizable[1])
        if icon:
            self.root.iconbitmap(icon)
        self.abonent_id = abonent_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö –∞–±–æ–Ω–µ–Ω—Ç–∞
        db = SqliteDB()
        self.abonent_data = db.get_abonent_by_id(self.abonent_id)
        db.close_connection()
        
        if not self.abonent_data:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞")
            self.root.destroy()
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkScrollableFrame(self.root)
        self.main_frame.pack(fill=BOTH, expand=True, padx=20, pady=20)
        
        self.montly_widget()
        self.grab_focus()

    def grab_focus(self):
        self.root.grab_set()
        self.root.focus_set()
        self.root.wait_window()

    def montly_widget(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(self.main_frame)
        title_frame.pack(fill=X, pady=(0, 20))
        ctk.CTkLabel(title_frame, 
                    text="–í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π",
                    font=("Roboto", 20, "bold")).pack(pady=10)
        
        # –û–±—â–∏–µ –ø–æ–ª—è (–º–µ—Å—è—Ü –∏ –≥–æ–¥)
        month_year_frame = ctk.CTkFrame(self.main_frame)
        month_year_frame.pack(fill=X, pady=10)
        
        month_frame = ctk.CTkFrame(month_year_frame)
        month_frame.pack(side=LEFT, padx=5, expand=True)
        self.month_label = ctk.CTkLabel(month_frame, 
                                      text="üìÖ –ú–µ—Å—è—Ü:",
                                      font=("Roboto", 14))
        self.month_label.pack(pady=5)
        self.month_entry = ctk.CTkEntry(month_frame,
                                      width=100,
                                      height=35,
                                      font=("Roboto", 12))
        self.month_entry.pack(pady=5)

        year_frame = ctk.CTkFrame(month_year_frame)
        year_frame.pack(side=LEFT, padx=5, expand=True)
        self.year_label = ctk.CTkLabel(year_frame, 
                                     text="üìÖ –ì–æ–¥:",
                                     font=("Roboto", 14))
        self.year_label.pack(pady=5)
        self.year_entry = ctk.CTkEntry(year_frame,
                                     width=100,
                                     height=35,
                                     font=("Roboto", 12))
        self.year_entry.pack(pady=5)

        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        self.entries = {}
        
        if self.abonent_data[7]:  # uses_electricity
            self.entries['electricity'] = self.create_entry_field("‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
            
        if self.abonent_data[8]:  # uses_water
            self.entries['water'] = self.create_entry_field("üíß –í–æ–¥–∞")
            
        if self.abonent_data[9]:  # uses_wastewater
            self.entries['wastewater'] = self.create_entry_field("üö∞ –í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ")
            
        if self.abonent_data[10]:  # uses_gas
            self.entries['gas'] = self.create_entry_field("üî• –ì–∞–∑")

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ctk.CTkFrame(self.main_frame)
        button_frame.pack(side=BOTTOM, fill=X, pady=20)
        
        ctk.CTkButton(button_frame, 
                     text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                     font=("Roboto", 12),
                     height=40,
                     command=self.save_data).pack(side=LEFT, padx=20, pady=5)
        
        ctk.CTkButton(button_frame, 
                     text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                     font=("Roboto", 12),
                     height=40,
                     command=self.show_edit_window).pack(side=LEFT, padx=20, pady=5)
        
        ctk.CTkButton(button_frame, 
                     text="‚ùå –û—Ç–º–µ–Ω–∞",
                     font=("Roboto", 12),
                     height=40,
                     fg_color="transparent",
                     border_width=2,
                     command=self.root.destroy).pack(side=LEFT, padx=20, pady=5)

    def create_entry_field(self, label_text):
        frame = ctk.CTkFrame(self.main_frame)
        frame.pack(fill=X, pady=10)
        
        ctk.CTkLabel(frame, 
                    text=label_text,
                    font=("Roboto", 14)).pack(side=LEFT, padx=10)
        
        entry = ctk.CTkEntry(frame,
                           width=200,
                           height=35,
                           font=("Roboto", 12))
        entry.pack(side=RIGHT, padx=10)
        return entry

    def get_average_consumption(self, utility_type):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏"""
        try:
            db = SqliteDB()
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
            data = db.get_last_months_consumption(self.abonent_id, utility_type, limit=3)
            db.close_connection()
            
            if not data:
                return None
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
            valid_values = [x for x in data if x is not None]
            if not valid_values:
                return None
                
            return statistics.mean(valid_values)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")
            return None

    def check_consumption_difference(self, utility_type, current_value):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–æ–ª–µ–µ —á–µ–º –≤ 10 —Ä–∞–∑"""
        if current_value is None:
            return True
            
        avg_consumption = self.get_average_consumption(utility_type)
        if avg_consumption is None or avg_consumption == 0:
            return True
            
        ratio = current_value / avg_consumption
        return 0.1 <= ratio <= 10

    def confirm_unusual_value(self, utility_name, current_value, avg_consumption):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—ã—á–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏"""
        message = (f"–í–Ω–∏–º–∞–Ω–∏–µ! –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {utility_name} ({current_value}) "
                  f"—Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã ({avg_consumption:.2f}).\n\n"
                  f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ?")
        return messagebox.askyesno("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", message)

    def check_previous_month_data(self, current_values):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö"""
        try:
            month = int(self.month_entry.get())
            year = int(self.year_entry.get())
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
            prev_month = 12 if month == 1 else month - 1
            prev_year = year - 1 if month == 1 else year
            
            db = SqliteDB()
            prev_data = db.get_monthly_data_by_date(self.abonent_id, prev_month, prev_year)
            db.close_connection()
            
            if not prev_data:
                return True  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
                
            utilities = [
                ('electricity', '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è'),
                ('water', '–í–æ–¥–∞'),
                ('wastewater', '–í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ'),
                ('gas', '–ì–∞–∑')
            ]
            
            errors = []
            for current_value, (field, name) in zip(current_values, utilities):
                if current_value is not None and prev_data[field] is not None:
                    if current_value < prev_data[field]:
                        errors.append(f"{name}: —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ ({current_value}) –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ({prev_data[field]})")
            
            if errors:
                message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö:\n\n" + "\n".join(errors)
                if messagebox.askyesno("–û—à–∏–±–∫–∞ –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö", 
                                     message + "\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è?"):
                    self.edit_previous_month_data(prev_month, prev_year, prev_data)
                    return False
                return False
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π: {e}")
            return True

    def edit_previous_month_data(self, month, year, data):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        EditMonthlyDataWindow(self.root, self.abonent_id, month, year, data, self.refresh_data)

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        pass

    def show_edit_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        SelectMonthWindow(self.root, self.abonent_id, self.edit_selected_month)
        
    def edit_selected_month(self, month, year, values):
        """Callback –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
        EditMonthlyDataWindow(self.root, self.abonent_id, month, year, values, self.refresh_data)

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            month = int(self.month_entry.get())
            year = int(self.year_entry.get())
            
            if not (1 <= month <= 12):
                CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                            message="–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12",
                            icon="cancel")
                return
                
            if not (2000 <= year <= 2100):
                CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                            message="–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2000 –¥–æ 2100",
                            icon="cancel")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
            electricity = float(self.entries['electricity'].get()) if 'electricity' in self.entries else None
            water = float(self.entries['water'].get()) if 'water' in self.entries else None
            wastewater = float(self.entries['wastewater'].get()) if 'wastewater' in self.entries else None
            gas = float(self.entries['gas'].get()) if 'gas' in self.entries else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            if electricity is not None:
                self.check_consumption_difference('electricity', electricity)
            if water is not None:
                self.check_consumption_difference('water', water)
            if wastewater is not None:
                self.check_consumption_difference('wastewater', wastewater)
            if gas is not None:
                self.check_consumption_difference('gas', gas)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            db = SqliteDB()
            db.insert_monthly_data(self.abonent_id, month, year, electricity, water, wastewater, gas)
            db.close_connection()
            
            CTkMessagebox(title="–£—Å–ø–µ—Ö", 
                         message="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                         icon="check")
            
            # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.root.destroy()
            
        except ValueError as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.",
                         icon="cancel")
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                         icon="cancel")

        
