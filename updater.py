import os
import sys
import shutil
import json
import sqlite3
from pathlib import Path
from datetime import datetime
import customtkinter as ctk
from CTkMessagebox import CTkMessagebox

class UpdateManager:
    def __init__(self):
        self.current_version = self.get_current_version()
        self.data_dir = self.get_data_directory()
        self.backup_dir = os.path.join(self.data_dir, 'backup')
        
    def get_current_version(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if getattr(sys, 'frozen', False):
                # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ –≤ exe
                base_path = sys._MEIPASS
                version_file = os.path.join(base_path, 'version.txt')
            else:
                # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
                version_file = 'version.txt'
            
            if os.path.exists(version_file):
                with open(version_file, 'r', encoding='utf-8') as f:
                    return f.read().strip()
        except:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "1.0.0"
    
    def get_data_directory(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏"""
        if getattr(sys, 'frozen', False):
            # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ –≤ exe
            base_path = os.path.dirname(sys.executable)
            data_dir = os.path.join(base_path, 'data')
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
            data_dir = 'data'
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(data_dir, exist_ok=True)
        return data_dir
    
    def backup_database(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            os.makedirs(self.backup_dir, exist_ok=True)
            
            # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_path = os.path.join(self.data_dir, 'abonent.db')
            
            if os.path.exists(db_path):
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_name = f"abonent_backup_{timestamp}.db"
                backup_path = os.path.join(self.backup_dir, backup_name)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                shutil.copy2(db_path, backup_path)
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
                return backup_path
            else:
                print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def restore_database(self, backup_path):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            if backup_path and os.path.exists(backup_path):
                db_path = os.path.join(self.data_dir, 'abonent.db')
                shutil.copy2(backup_path, db_path)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: {os.path.basename(backup_path)}")
                return True
            else:
                print("‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def check_database_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db_path = os.path.join(self.data_dir, 'abonent.db')
            if not os.path.exists(db_path):
                print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = ['abonents', 'monthly_data']
            missing_tables = [table for table in required_tables if table not in tables]
            
            if missing_tables:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                conn.close()
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM abonents")
            abonents_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM monthly_data")
            monthly_data_count = cursor.fetchone()[0]
            
            print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   - –ê–±–æ–Ω–µ–Ω—Ç–æ–≤: {abonents_count}")
            print(f"   - –ó–∞–ø–∏—Å–µ–π –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {monthly_data_count}")
            
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def show_update_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if getattr(sys, 'frozen', False):
                base_path = sys._MEIPASS
                update_info_file = os.path.join(base_path, 'update_info.json')
            else:
                update_info_file = 'update_info.json'
            
            if os.path.exists(update_info_file):
                with open(update_info_file, 'r', encoding='utf-8') as f:
                    update_info = json.load(f)
                
                # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                self.create_info_window(update_info)
            else:
                print("‚ö†Ô∏è –§–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    def create_info_window(self, update_info):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        root = ctk.CTk()
        root.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        root.geometry("500x400")
        root.resizable(False, False)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(root)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(main_frame, 
                                  text="üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏",
                                  font=("Roboto", 18, "bold"))
        title_label.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        version_frame = ctk.CTkFrame(main_frame)
        version_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(version_frame, 
                    text=f"üìã –í–µ—Ä—Å–∏—è: {update_info.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    font=("Roboto", 14, "bold")).pack(pady=5)
        
        build_date = update_info.get('build_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if build_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            try:
                date_obj = datetime.fromisoformat(build_date)
                formatted_date = date_obj.strftime("%d.%m.%Y %H:%M")
                ctk.CTkLabel(version_frame, 
                            text=f"üìÖ –î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: {formatted_date}",
                            font=("Roboto", 12)).pack(pady=2)
            except:
                pass
        
        # –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        features_frame = ctk.CTkFrame(main_frame)
        features_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(features_frame, 
                    text="üÜï –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
                    font=("Roboto", 14, "bold")).pack(pady=5)
        
        features = update_info.get('features', [])
        for feature in features:
            ctk.CTkLabel(features_frame, 
                        text=f"‚Ä¢ {feature}",
                        font=("Roboto", 12)).pack(pady=2, anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ctk.CTkButton(main_frame, 
                                   text="–ó–∞–∫—Ä—ã—Ç—å",
                                   command=root.destroy,
                                   height=35)
        close_button.pack(pady=10)
        
        root.mainloop()
    
    def run_update_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {self.current_version}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {self.data_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if self.check_database_integrity():
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = self.backup_database()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        self.show_update_info()
        
        return backup_path

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ComunalKorm...")
    
    updater = UpdateManager()
    backup_path = updater.run_update_check()
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é:")
    print("1. –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ComunalKorm")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª ComunalKorm.exe –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞")
    print("4. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    if backup_path:
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {os.path.basename(backup_path)}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main() 