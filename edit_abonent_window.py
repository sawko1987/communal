from pprint import pprint
from tkinter import *
import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
import tkinter.messagebox as messagebox
from users_db import SqliteDB
from tkinter import BooleanVar


class EditAbonentWindow:
    def __init__(self, parent, width, height, abonent_data, title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞",
                 resizable=(False, False), icon='image/korm.ico'):
        self.top = ctk.CTkToplevel(parent)
        self.top.title(title)
        self.top.geometry(f"{width}x{height}")
        self.top.resizable(resizable[0], resizable[1])
        if icon:
            self.top.iconbitmap(icon)

        self.abonent_data = abonent_data
        self.abonent_id = abonent_data[0]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –≤–∏–¥–∂–µ—Ç–æ–≤
        self.var_elect = BooleanVar(value=abonent_data[2] is not None)
        self.water_var = BooleanVar(value=abonent_data[4] is not None)
        self.wastewater_var = BooleanVar(value=abonent_data[5] is not None)
        self.gaz_var = BooleanVar(value=abonent_data[6] is not None)
        self.transformation_ratio_var = BooleanVar(value=abonent_data[3] is not None)

        self.var_entry = [
            (self.var_elect, "‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", abonent_data[2]),
            (self.transformation_ratio_var, "üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏", abonent_data[3]),
            (self.water_var, "üíß –í–æ–¥–∞", abonent_data[4]),
            (self.wastewater_var, "üö∞ –í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ", abonent_data[5]),
            (self.gaz_var, "üî• –ì–∞–∑", abonent_data[6]),
        ]

        self.labels = {}
        self.entries = {}
        self.name_entry = None

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkScrollableFrame(self.top)
        self.main_frame.pack(fill=BOTH, expand=True, padx=20, pady=20)

        self.draw_abonent_widget()
        self.grab_focus()

    def grab_focus(self):
        self.top.grab_set()
        self.top.focus_set()
        self.top.wait_window()

    def draw_abonent_widget(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(self.main_frame)
        title_frame.pack(fill=X, pady=(0, 20))
        ctk.CTkLabel(title_frame, 
                    text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞",
                    font=("Roboto", 20, "bold")).pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        name_frame = ctk.CTkFrame(self.main_frame)
        name_frame.pack(fill=X, pady=10)
        
        ctk.CTkLabel(name_frame, 
                    text="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    font=("Roboto", 14)).pack(pady=5)
        
        self.name_entry = ctk.CTkEntry(name_frame, 
                                     width=300,
                                     height=35,
                                     font=("Roboto", 12))
        self.name_entry.insert(0, self.abonent_data[1])
        self.name_entry.pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è —É—Å–ª—É–≥
        services_frame = ctk.CTkFrame(self.main_frame)
        services_frame.pack(fill=X, pady=10)
        
        ctk.CTkLabel(services_frame, 
                    text="–£—Å–ª—É–≥–∏ –∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è",
                    font=("Roboto", 14)).pack(pady=5)

        # –°–æ–∑–¥–∞–µ–º CheckBox –∏ Entry –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        for var, text, value in self.var_entry:
            service_frame = ctk.CTkFrame(services_frame)
            service_frame.pack(fill=X, pady=5)
            
            # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å
            ctk.CTkCheckBox(service_frame, 
                          text=text,
                          font=("Roboto", 12),
                          variable=var,
                          onvalue=1,
                          offvalue=0,
                          command=lambda v=var, t=text, val=value: self.chek_chek_box(v, t, val)).pack(side=LEFT, padx=5)

            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            if var.get():
                entry = ctk.CTkEntry(service_frame, 
                                   width=200,
                                   height=35,
                                   font=("Roboto", 12))
                if value is not None:
                    entry.insert(0, str(value))
                entry.pack(side=LEFT, padx=5)
                self.entries[text] = entry

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ctk.CTkFrame(self.main_frame)
        button_frame.pack(side=BOTTOM, fill=X, pady=20)
        
        # –ö–Ω–æ–ø–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        ctk.CTkButton(button_frame, 
                     text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                     font=("Roboto", 12),
                     height=40,
                     command=self.save_data).pack(side=LEFT, padx=20, pady=5)
        
        ctk.CTkButton(button_frame, 
                     text="‚ùå –û—Ç–º–µ–Ω–∞",
                     font=("Roboto", 12),
                     height=40,
                     fg_color="transparent",
                     border_width=2,
                     command=self.top.destroy).pack(side=LEFT, padx=20, pady=5)

    def chek_chek_box(self, var, text, default_value=None):
        if var.get():  # –ï—Å–ª–∏ CheckBox –æ—Ç–º–µ—á–µ–Ω
            if text not in self.entries:
                entry = ctk.CTkEntry(self.main_frame, 
                                   width=200,
                                   height=35,
                                   font=("Roboto", 12))
                if default_value is not None:
                    entry.insert(0, str(default_value))
                entry.pack(pady=5)
                self.entries[text] = entry
        else:  # –ï—Å–ª–∏ CheckBox –Ω–µ –æ—Ç–º–µ—á–µ–Ω
            if text in self.entries:
                self.entries[text].destroy()
                del self.entries[text]

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            fulname = self.name_entry.get().strip()
            if not fulname:
                CTkMessagebox(title="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                            message="–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                            icon="warning")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            def get_entry_value(field_name):
                if field_name in self.entries:
                    value = self.entries[field_name].get().strip()
                    return value if value else None
                return None

            elect_value = get_entry_value("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è")
            transformation_ratio_value = get_entry_value("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            water_value = get_entry_value("–í–æ–¥–∞")
            wastewater_value = get_entry_value("–í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ")
            gaz_value = get_entry_value("–ì–∞–∑")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞
            try:
                elect_value = float(elect_value) if elect_value is not None else None
                transformation_ratio_value = int(
                    transformation_ratio_value) if transformation_ratio_value is not None else None
                water_value = int(water_value) if water_value is not None else None
                wastewater_value = int(wastewater_value) if wastewater_value is not None else None
                gaz_value = int(gaz_value) if gaz_value is not None else None
            except ValueError as e:
                CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                            message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}",
                            icon="cancel")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = SqliteDB()
            try:
                if db.update_data(self.abonent_id, fulname, elect_value, transformation_ratio_value,
                                  water_value, wastewater_value, gaz_value):
                    CTkMessagebox(title="–£—Å–ø–µ—Ö", 
                                message="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                                icon="check")
                    self.top.destroy()
                else:
                    CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                                message="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                icon="cancel")
            except Exception as db_error:
                CTkMessagebox(title="–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
                            message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(db_error)}",
                            icon="cancel")
            finally:
                db.close_connection()

        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                         icon="cancel")