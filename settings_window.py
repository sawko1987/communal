import customtkinter as ctk
import json
import os
from CTkMessagebox import CTkMessagebox
from tkinter import filedialog

class SettingsWindow:
    def __init__(self, parent, width, height, title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", resizable=(False, False)):
        self.root = ctk.CTkToplevel(parent)
        self.root.title(title)
        self.root.geometry(f"{width}x{height}")
        self.root.resizable(resizable[0], resizable[1])
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self.load_settings()
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
        self.create_widgets()
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.root.grab_set()
        self.root.focus_set()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –≤ –æ–∫–Ω–µ"""
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = ctk.CTkScrollableFrame(self.root)
        main_frame.pack(padx=20, pady=20, fill="both", expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(main_frame)
        title_frame.pack(fill="x", pady=(0, 20))
        ctk.CTkLabel(title_frame, 
                    text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                    font=("Roboto", 20, "bold")).pack(pady=10)
        
        # –°–µ–∫—Ü–∏—è –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        path_frame = ctk.CTkFrame(main_frame)
        path_frame.pack(padx=10, pady=10, fill="x")
        
        path_label = ctk.CTkLabel(path_frame, 
                                text="üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤:",
                                font=("Roboto", 14))
        path_label.pack(pady=5)
        
        path_input_frame = ctk.CTkFrame(path_frame)
        path_input_frame.pack(fill="x", padx=5, pady=5)
        
        self.path_entry = ctk.CTkEntry(path_input_frame,
                                     height=35,
                                     font=("Roboto", 12))
        self.path_entry.pack(side="left", padx=5, fill="x", expand=True)
        self.path_entry.insert(0, self.settings.get("save_path", r"C:\–†–µ–µ—Å—Ç—Ä—ã –ø–æ –∞–±–æ–Ω–µ–Ω—Ç–∞–º"))
        
        browse_button = ctk.CTkButton(path_input_frame, 
                                    text="üìÇ –û–±–∑–æ—Ä",
                                    font=("Roboto", 12),
                                    height=35,
                                    command=self.browse_save_path)
        browse_button.pack(side="right", padx=5)
        
        # –°–µ–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–µ–π
        signatures_frame = ctk.CTkFrame(main_frame)
        signatures_frame.pack(padx=10, pady=10, fill="both", expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–µ–π
        title_label = ctk.CTkLabel(signatures_frame, 
                                 text="‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ",
                                 font=("Roboto", 16, "bold"))
        title_label.pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤
        self.signatures_list = []
        self.signatures_frames = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∏
        signatures = self.settings.get("signatures", [])
        for signature in signatures:
            self.add_signature_field(signatures_frame, signature)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
        add_button = ctk.CTkButton(signatures_frame, 
                                 text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å",
                                 font=("Roboto", 12),
                                 height=35,
                                 command=lambda: self.add_signature_field(signatures_frame))
        add_button.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –æ–∫–Ω–∞
        buttons_frame = ctk.CTkFrame(self.root)
        buttons_frame.pack(padx=20, pady=10, fill="x")
        
        save_button = ctk.CTkButton(buttons_frame, 
                                  text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                                  font=("Roboto", 12),
                                  height=40,
                                  command=self.save_settings)
        save_button.pack(side="right", padx=5)
        
        cancel_button = ctk.CTkButton(buttons_frame, 
                                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                                    font=("Roboto", 12),
                                    height=40,
                                    fg_color="red",
                                    command=self.root.destroy)
        cancel_button.pack(side="right", padx=5)
        
    def add_signature_field(self, parent, signature=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏"""
        frame = ctk.CTkFrame(parent)
        frame.pack(padx=5, pady=5, fill="x")
        
        # –ü–æ–ª–µ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        position_entry = ctk.CTkEntry(frame, 
                                    placeholder_text="–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                                    height=35,
                                    font=("Roboto", 12))
        position_entry.pack(side="left", padx=5, fill="x", expand=True)
        
        # –ü–æ–ª–µ –¥–ª—è —Ñ–∞–º–∏–ª–∏–∏
        name_entry = ctk.CTkEntry(frame, 
                                placeholder_text="–§–∞–º–∏–ª–∏—è –ò.–û.",
                                height=35,
                                font=("Roboto", 12))
        name_entry.pack(side="left", padx=5, fill="x", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_button = ctk.CTkButton(frame, 
                                    text="‚ùå",
                                    width=40,
                                    height=35,
                                    fg_color="red",
                                    command=lambda: self.remove_signature_field(frame))
        delete_button.pack(side="right", padx=5)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å—å, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        if signature:
            position_entry.insert(0, signature.get("position", ""))
            name_entry.insert(0, signature.get("name", ""))
        
        self.signatures_frames.append((frame, position_entry, name_entry))
        
    def remove_signature_field(self, frame):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª–µ –ø–æ–¥–ø–∏—Å–∏"""
        for i, (f, _, _) in enumerate(self.signatures_frames):
            if f == frame:
                self.signatures_frames.pop(i)
                frame.destroy()
                break
        
    def browse_save_path(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder_path = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤",
            initialdir=self.path_entry.get()
        )
        if folder_path:
            self.path_entry.delete(0, "end")
            self.path_entry.insert(0, folder_path)
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        settings_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'settings.json')
        try:
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞",
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        return {}
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
        signatures = []
        for _, position_entry, name_entry in self.signatures_frames:
            position = position_entry.get().strip()
            name = name_entry.get().strip()
            if position and name:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
                signatures.append({
                    "position": position,
                    "name": name
                })
        
        settings = {
            "save_path": self.path_entry.get(),
            "signatures": signatures
        }
        
        settings_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'settings.json')
        try:
            os.makedirs(os.path.dirname(settings_file), exist_ok=True)
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=4)
            
            CTkMessagebox(title="–£—Å–ø–µ—Ö",
                         message="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            self.root.destroy()
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞",
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}") 