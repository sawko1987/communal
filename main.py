import os
from edit_abonent_window import EditAbonentWindow
import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
from datetime import datetime

from HistoryWindow import ConsumptionHistoryWindow
from add_abonent_window import AddAbonentWindow
from monthly_data_window import MonthlyDataWindow
from users_db import SqliteDB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class Window:
    def __init__(self, width, height, title="–£—á–µ—Ç –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –ê–û_–ö–æ—Ä–º–º–∞—à",
                 resizable=(False, False), icon='image/korm.ico'):
        self.root = ctk.CTk()
        self.root.title(title)
        self.root.geometry(f"{width}x{height}")
        self.root.resizable(resizable[0], resizable[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏
        if icon and os.path.exists(icon):
            self.root.iconbitmap(icon)
        elif icon:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –∏–∫–æ–Ω–∫–∏ '{icon}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = SqliteDB()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
        self.list_abonent = self.load_abonents()

        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.tab_control = None
        self.combobox = None
        self.selected_abonent_info = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.draw_widget()

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if self.list_abonent:
            self.combobox.set(self.list_abonent[0][1])
            self.on_combobox_select()

    def load_abonents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            abonents = self.db.fetch_data()
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤: {len(abonents)}")
            return abonents
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            return []

    def create_child_window(self, width, height, title=None):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–∞"""
        print("–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–∫–Ω–∞")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        try:
            # Create child window without hiding main window
            child_window = AddAbonentWindow(self.root, width, height, title="–î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞")
            print("–î–æ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
            # Wait for child window to close
            self.root.wait_window(child_window.root)
            print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–∫–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
            # Refresh data after child window closes
            self.refresh_data()
            self.on_combobox_select()
            print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞: {e}")

    def create_monthly_data_window(self, width, height, abonent_id, title=None):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –≤–Ω–µ—Å–µ–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # Create and wait for child window without hiding main window
            monthly_window = MonthlyDataWindow(self.root, width, height, abonent_id, title=title)
            self.root.wait_window(monthly_window.root)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def create_consumption_history_window(self, width, height, abonent_id, title=None):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"""
        try:
            # Create and wait for child window without hiding main window
            history_window = ConsumptionHistoryWindow(self.root, width, height, abonent_id, title=title)
            self.root.wait_window(history_window.root)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def draw_widget(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        main_container = ctk.CTkFrame(self.root)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tab_control = ctk.CTkTabview(main_container, width=200)
        self.tab_control.pack(side='left', fill='y', padx=(0, 20))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tab_control.add("–ê–±–æ–Ω–µ–Ω—Ç—ã")
        self.tab_control.add("–û—Ç—á–µ—Ç—ã")
        self.tab_control.add("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        tab1 = self.tab_control.tab("–ê–±–æ–Ω–µ–Ω—Ç—ã")
        tab2 = self.tab_control.tab("–û—Ç—á–µ—Ç—ã")
        tab3 = self.tab_control.tab("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –í–∫–ª–∞–¥–∫–∞ "–ê–±–æ–Ω–µ–Ω—Ç—ã"
        title_frame = ctk.CTkFrame(tab1)
        title_frame.pack(fill="x", padx=10, pady=10)
        ctk.CTkLabel(title_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞–º–∏", 
                    font=("Roboto", 16, "bold")).pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–∞–º–∏
        buttons_frame = ctk.CTkFrame(tab1)
        buttons_frame.pack(fill="x", padx=10, pady=5)

        ctk.CTkButton(buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞",
                     command=lambda: self.create_child_window(400, 650),
                     height=35).pack(fill="x", pady=5)
        
        ctk.CTkButton(buttons_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞",
                     command=self.edit_abonent,
                     height=35).pack(fill="x", pady=5)
        
        ctk.CTkButton(buttons_frame, text="–£–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞",
                     command=self.delete_abonent,
                     height=35).pack(fill="x", pady=5)

        # –í—ã–±–æ—Ä –∞–±–æ–Ω–µ–Ω—Ç–∞
        select_frame = ctk.CTkFrame(tab1)
        select_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(select_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–Ω—Ç–∞:",
                    font=("Roboto", 12)).pack(pady=5)
        
        self.combobox = ctk.CTkComboBox(select_frame, width=250,
                                      font=("Roboto", 12))
        self.combobox.pack(pady=5)
        self.combobox.configure(command=self.on_combobox_select_callback)

        # –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        data_frame = ctk.CTkFrame(tab1)
        data_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkButton(data_frame, text="–í–Ω–µ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è",
                     command=self.run_monthly_data_window,
                     height=35).pack(fill="x", pady=5)
        
        ctk.CTkButton(data_frame, text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
                     command=self.run_consumption_history_window,
                     height=35).pack(fill="x", pady=5)

        # –í–∫–ª–∞–¥–∫–∞ "–û—Ç—á–µ—Ç—ã"
        reports_title_frame = ctk.CTkFrame(tab2)
        reports_title_frame.pack(fill="x", padx=10, pady=10)
        ctk.CTkLabel(reports_title_frame, text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤", 
                    font=("Roboto", 16, "bold")).pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        reports_buttons_frame = ctk.CTkFrame(tab2)
        reports_buttons_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkButton(reports_buttons_frame, text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä—ã –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º",
                     command=self.generate_registries_for_all_abonents,
                     height=40,
                     font=("Roboto", 12)).pack(fill="x", pady=10)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        reports_info_frame = ctk.CTkFrame(tab2)
        reports_info_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        ctk.CTkLabel(reports_info_frame, text="–°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤",
                    font=("Roboto", 14, "bold")).pack(pady=5)
        
        self.reports_status_text = ctk.CTkTextbox(reports_info_frame,
                                                font=("Roboto", 12),
                                                wrap="word")
        self.reports_status_text.pack(fill="both", expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_frame = ctk.CTkFrame(tab3)
        settings_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                    font=("Roboto", 16, "bold")).pack(pady=5)
        
        ctk.CTkButton(settings_frame, text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                     command=self.open_settings_window,
                     height=35).pack(fill="x", pady=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ctk.CTkFrame(main_container)
        info_frame.pack(side='right', fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        ctk.CTkLabel(info_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–±–æ–Ω–µ–Ω—Ç–µ",
                    font=("Roboto", 16, "bold")).pack(pady=10)

        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–±–æ–Ω–µ–Ω—Ç–µ
        self.selected_abonent_info = ctk.CTkTextbox(info_frame,
                                                  font=("Roboto", 12),
                                                  wrap="word")
        self.selected_abonent_info.pack(fill="both", expand=True,
                                      padx=10, pady=10)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        self.update_combobox()

    def update_combobox(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
            self.list_abonent = self.load_abonents()

            if not self.list_abonent:
                print("–°–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
                self.combobox.configure(values=[])
                self.selected_abonent_info.delete("1.0", "end")
                return

            abonent_names = [abonent[1] for abonent in self.list_abonent]
            self.combobox.configure(values=abonent_names)

            if abonent_names:
                self.combobox.set(abonent_names[0])
                self.on_combobox_select()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ combobox: {e}")

    def on_combobox_select(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–±–æ–Ω–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            selected_name = self.combobox.get()
            if not selected_name:
                return

            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.selected_abonent_info.delete("1.0", "end")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            self.list_abonent = self.load_abonents()

            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞
            selected_abonent = next((abonent for abonent in self.list_abonent
                                     if abonent[1] == selected_name), None)

            if not selected_abonent:
                self.selected_abonent_info.insert("1.0", "–ê–±–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–±–æ–Ω–µ–Ω—Ç–µ
            info = (
                f"üìã –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n"
                f"{'=' * 40}\n"
                f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {selected_abonent[1]}\n\n"
                f"‚ö° –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è:\n"
                f"   ‚Ä¢ –ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞: {selected_abonent[2] or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {selected_abonent[3] or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                f"üíß –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ:\n"
                f"   ‚Ä¢ –ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞: {selected_abonent[4] or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                f"   ‚Ä¢ –í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ: {selected_abonent[5] or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                f"üî• –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ:\n"
                f"   ‚Ä¢ –ù–æ–º–µ—Ä —Å—á–µ—Ç—á–∏–∫–∞: {selected_abonent[6] or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Å—è—Ü–∞—Ö —Å –¥–∞–Ω–Ω—ã–º–∏
            abonent_id = self.db.get_abonent_id_by_name(selected_name)
            if abonent_id:
                try:
                    last_months_data = self.db.get_last_months_data(abonent_id)
                    if last_months_data:
                        info += f"\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–ù–ò–Ø\n{'=' * 40}\n"

                        for month_data in last_months_data:
                            month, year, electricity, water, wastewater, gas = month_data
                            info += (
                                f"üìÖ {self.format_month(month)} {year}\n"
                                f"   ‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: {electricity or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                                f"   ‚Ä¢ –í–æ–¥–∞: {water or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                                f"   ‚Ä¢ –í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ: {wastewater or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                                f"   ‚Ä¢ –ì–∞–∑: {gas or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                                f"{'-' * 40}\n"
                            )
                    else:
                        info += "\n‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏\n"
                except Exception as db_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {db_error}")
                    info += "\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö\n"

            self.selected_abonent_info.insert("1.0", info)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∞–±–æ–Ω–µ–Ω—Ç–∞: {e}")
            self.selected_abonent_info.insert("1.0", f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def on_combobox_select_callback(self, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ"""
        self.on_combobox_select()

    def delete_abonent(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞"""
        try:
            selected_name = self.combobox.get()
            if not selected_name:
                CTkMessagebox(title="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                            message="–ù–µ –≤—ã–±—Ä–∞–Ω –∞–±–æ–Ω–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                            icon="warning")
                return

            confirm = CTkMessagebox(title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                  message=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç–∞ '{selected_name}'?",
                                  icon="question",
                                  option_1="–î–∞",
                                  option_2="–ù–µ—Ç")
            
            if confirm.get() == "–î–∞":
                self.db.delete_data(selected_name)
                self.refresh_data()
                CTkMessagebox(title="–£—Å–ø–µ—Ö", 
                            message=f"–ê–±–æ–Ω–µ–Ω—Ç '{selected_name}' —É–¥–∞–ª–µ–Ω",
                            icon="check")
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞: {str(e)}",
                         icon="cancel")
        self.on_combobox_select()

    def refresh_data(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
            self.list_abonent = self.load_abonents()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
            if self.list_abonent:
                current_selection = self.combobox.get()
                abonent_names = [abonent[1] for abonent in self.list_abonent]
                self.combobox.configure(values=abonent_names)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –∞–±–æ–Ω–µ–Ω—Ç –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if current_selection in abonent_names:
                    self.combobox.set(current_selection)
                else:
                    self.combobox.set(abonent_names[0] if abonent_names else "")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.on_combobox_select()
            else:
                self.combobox.configure(values=[])
                self.selected_abonent_info.delete("1.0", "end")
                self.selected_abonent_info.insert("1.0", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤")

        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                         icon="cancel")

    def run_monthly_data_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤–Ω–µ—Å–µ–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            selected_name = self.combobox.get()
            if not selected_name:
                CTkMessagebox(title="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                            message="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–Ω—Ç–∞",
                            icon="warning")
                return

            abonent_id = self.db.get_abonent_id_by_name(selected_name)
            if abonent_id:
                # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                self.create_monthly_data_window(400, 600, abonent_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.refresh_data()
                self.on_combobox_select()
            else:
                CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∞–±–æ–Ω–µ–Ω—Ç–∞",
                            icon="cancel")
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
                         icon="cancel")

    def edit_abonent(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç–∞"""
        try:
            selected_name = self.combobox.get()
            if not selected_name:
                CTkMessagebox(title="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                            message="–ù–µ –≤—ã–±—Ä–∞–Ω –∞–±–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                            icon="warning")
                return

            abonent_id = self.db.get_abonent_id_by_name(selected_name)
            if not abonent_id:
                CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∞–±–æ–Ω–µ–Ω—Ç–∞",
                            icon="cancel")
                return

            abonent_data = self.db.get_abonent_by_id(abonent_id)
            if not abonent_data:
                CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                            message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–±–æ–Ω–µ–Ω—Ç–∞",
                            icon="cancel")
                return

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            edit_window = EditAbonentWindow(self.root, 400, 650, abonent_data)

            # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
            self.refresh_data()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.combobox.set(selected_name)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∞–±–æ–Ω–µ–Ω—Ç–∞
            self.on_combobox_select()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞: {str(e)}",
                         icon="cancel")

    def run_consumption_history_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"""
        try:
            selected_name = self.combobox.get()
            if not selected_name:
                CTkMessagebox(title="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                            message="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–Ω—Ç–∞",
                            icon="warning")
                return

            abonent_id = self.db.get_abonent_id_by_name(selected_name)
            if abonent_id:
                self.create_consumption_history_window(900, 700, abonent_id)
            else:
                CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∞–±–æ–Ω–µ–Ω—Ç–∞",
                            icon="cancel")
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}",
                         icon="cancel")

    def open_settings_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            from settings_window import SettingsWindow
            settings_window = SettingsWindow(self.root, 400, 500)
            settings_window.root.wait_window()  # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        except Exception as e:
            CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                         message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
                         icon="cancel")

    def format_month(self, month_num):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        months = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        return months[month_num - 1] if 1 <= month_num <= 12 else f"–ú–µ—Å—è—Ü {month_num}"

    def generate_registries_for_all_abonents(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä—ã –ø–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
            self.reports_status_text.delete("1.0", "end")
            self.reports_status_text.insert("end", "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–µ—Å—Ç—Ä–æ–≤ –ø–æ –≤—Å–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞–º...\n\n")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
            all_abonents = self.db.fetch_data()
            if not all_abonents:
                self.reports_status_text.insert("end", "‚ùå –ù–µ—Ç –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n")
                return
            
            self.reports_status_text.insert("end", f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤: {len(all_abonents)}\n\n")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥
            from tkinter import simpledialog
            import datetime
            
            current_date = datetime.datetime.now()
            month = simpledialog.askinteger("–ú–µ—Å—è—Ü", 
                                          f"–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü (1-12):", 
                                          initialvalue=current_date.month,
                                          minvalue=1, maxvalue=12)
            if month is None:
                self.reports_status_text.insert("end", "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n")
                return
                
            year = simpledialog.askinteger("–ì–æ–¥", 
                                         f"–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥:", 
                                         initialvalue=current_date.year,
                                         minvalue=2000, maxvalue=2100)
            if year is None:
                self.reports_status_text.insert("end", "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            month_names = {
                1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
                5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
                9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
            }
            month_name = month_names[month]
            
            self.reports_status_text.insert("end", f"üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–µ—Å—Ç—Ä—ã –∑–∞ {month_name} {year} –≥–æ–¥–∞\n\n")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            import os
            import json
            settings_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data', 'settings.json')
            try:
                if os.path.exists(settings_file):
                    with open(settings_file, 'r', encoding='utf-8') as f:
                        settings = json.load(f)
                else:
                    settings = {}
            except Exception as e:
                self.reports_status_text.insert("end", f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}\n")
                settings = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            save_path = settings.get("save_path", r"C:\–†–µ–µ—Å—Ç—Ä—ã –ø–æ –∞–±–æ–Ω–µ–Ω—Ç–∞–º")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
            month_folder_path = os.path.join(save_path, month_name)
            os.makedirs(month_folder_path, exist_ok=True)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
            from docx import Document
            from docx.shared import Pt, Inches
            from docx.enum.text import WD_ALIGN_PARAGRAPH
            import re
            
            successful_count = 0
            failed_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞
            for i, abonent in enumerate(all_abonents, 1):
                abonent_id = abonent[0]
                fulname = abonent[1]
                
                self.reports_status_text.insert("end", f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞ {i}/{len(all_abonents)}: {fulname}\n")
                self.reports_status_text.see("end")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
                    end_month_data = self.db.execute_query(
                        "SELECT * FROM monthly_data WHERE abonent_id = ? AND month = ? AND year = ?",
                        (abonent_id, month, year),
                        fetch_mode='one'
                    )
                    
                    if not end_month_data:
                        self.reports_status_text.insert("end", f"   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month_name} {year} –≥–æ–¥–∞\n")
                        failed_count += 1
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
                    prev_month = month - 1 if month > 1 else 12
                    prev_year = year if month > 1 else year - 1
                    
                    start_month_data = self.db.execute_query(
                        "SELECT * FROM monthly_data WHERE abonent_id = ? AND month = ? AND year = ?",
                        (abonent_id, prev_month, prev_year),
                        fetch_mode='one'
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç Word
                    doc = Document()
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
                    style = doc.styles['Normal']
                    style.font.name = 'Times New Roman'
                    style.font.size = Pt(12)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    title = doc.add_paragraph()
                    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    title_run = title.add_run('–†–ï–ï–°–¢–†\n–≤–æ–∑–º–µ—â–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤–æ–¥—ã\n')
                    title_run.bold = True
                    title_run.font.size = Pt(14)
                    
                    # –ü–µ—Ä–∏–æ–¥
                    period = doc.add_paragraph()
                    period.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    period.add_run(f'–∑–∞ {month_name} {year} –≥.\n').bold = True
                    
                    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                    org = doc.add_paragraph()
                    org.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    org.add_run(f'{fulname}\n').bold = True
                    
                    # –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (–∏–Ω–¥–µ–∫—Å 4 –≤ monthly_data)
                    if len(end_month_data) > 4 and end_month_data[4] is not None:
                        prev_value = float(start_month_data[4]) if start_month_data and len(start_month_data) > 4 and \
                                                                   start_month_data[4] is not None else 0.0
                        curr_value = float(end_month_data[4])
                        consumption = curr_value - prev_value
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–∞
                        transformation_ratio = abonent[3] if len(abonent) > 3 and abonent[3] else 1
                        total_consumption = consumption * transformation_ratio
                        
                        doc.add_paragraph('1. –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:', style='Normal')
                        doc.add_paragraph(f'   - –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {prev_value:.1f} –∫–í—Ç¬∑—á', style='Normal')
                        doc.add_paragraph(f'   - –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: {curr_value:.1f} –∫–í—Ç¬∑—á', style='Normal')
                        doc.add_paragraph(f'   - –∏—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {consumption:.1f} –∫–í—Ç¬∑—á', style='Normal')
                        
                        if transformation_ratio != 1:
                            doc.add_paragraph(f'   - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {transformation_ratio}', style='Normal')
                            doc.add_paragraph(f'   - –∏—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ö–¢: {total_consumption:.1f} –∫–í—Ç¬∑—á', style='Normal')
                        
                        doc.add_paragraph('2. –¢–∞—Ä–∏—Ñ –∑–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é: ______________ —Ä—É–±./–∫–í—Ç¬∑—á', style='Normal')
                        doc.add_paragraph('   –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ: ______________________ —Ä—É–±.', style='Normal')
                        doc.add_paragraph('3. –¢–∞—Ä–∏—Ñ –∑–∞ –∑–∞—è–≤–ª–µ–Ω–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å: _______________ —Ä—É–±./–∫–í—Ç', style='Normal')
                        doc.add_paragraph('   –ó–∞—è–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: _________________ –∫–í—Ç', style='Normal')
                        doc.add_paragraph('   –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ: ________________ —Ä—É–±.', style='Normal')
                        doc.add_paragraph('   –í–°–ï–ì–û –∫ –æ–ø–ª–∞—Ç–µ (–ø.2 + –ø.3): ________________ —Ä—É–±.', style='Normal')
                        doc.add_paragraph()
                    
                    # –í–æ–¥–∞ (–∏–Ω–¥–µ–∫—Å 5)
                    if len(end_month_data) > 5 and end_month_data[5] is not None:
                        prev_value = float(start_month_data[5]) if start_month_data and len(start_month_data) > 5 and \
                                                                   start_month_data[5] is not None else 0.0
                        curr_value = float(end_month_data[5])
                        consumption = curr_value - prev_value
                        
                        doc.add_paragraph('4. –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–¥—ã:', style='Normal')
                        doc.add_paragraph(f'   - –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {prev_value:.1f} –º¬≥', style='Normal')
                        doc.add_paragraph(f'   - –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: {curr_value:.1f} –º¬≥', style='Normal')
                        doc.add_paragraph(f'   - –∏—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {consumption:.1f} –º¬≥', style='Normal')
                        doc.add_paragraph('   –¢–∞—Ä–∏—Ñ: ______________ —Ä—É–±./–º¬≥', style='Normal')
                        doc.add_paragraph('   –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ: ______________________ —Ä—É–±.', style='Normal')
                        doc.add_paragraph()
                    
                    # –°—Ç–æ—á–Ω—ã–µ –≤–æ–¥—ã (–∏–Ω–¥–µ–∫—Å 6)
                    if len(end_month_data) > 6 and end_month_data[6] is not None:
                        prev_value = float(start_month_data[6]) if start_month_data and len(start_month_data) > 6 and \
                                                                   start_month_data[6] is not None else 0.0
                        curr_value = float(end_month_data[6])
                        consumption = curr_value - prev_value
                        
                        doc.add_paragraph('5. –í–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ:', style='Normal')
                        doc.add_paragraph(f'{consumption:.1f} –º¬≥', style='Normal')
                        doc.add_paragraph('   –¢–∞—Ä–∏—Ñ: ______________ —Ä—É–±./–º¬≥', style='Normal')
                        doc.add_paragraph('   –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ: ______________________ —Ä—É–±.', style='Normal')
                        doc.add_paragraph()
                    
                    # –ì–∞–∑ (–∏–Ω–¥–µ–∫—Å 7)
                    if len(end_month_data) > 7 and end_month_data[7] is not None:
                        prev_value = float(start_month_data[7]) if start_month_data and len(start_month_data) > 7 and \
                                                                   start_month_data[7] is not None else 0.0
                        curr_value = float(end_month_data[7])
                        consumption = curr_value - prev_value
                        
                        doc.add_paragraph('6. –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≥–∞–∑–∞:', style='Normal')
                        doc.add_paragraph(f'   - –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {prev_value:.1f} –º¬≥', style='Normal')
                        doc.add_paragraph(f'   - –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: {curr_value:.1f} –º¬≥', style='Normal')
                        doc.add_paragraph(f'   - –∏—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {consumption:.1f} –º¬≥', style='Normal')
                        doc.add_paragraph('   –¢–∞—Ä–∏—Ñ: ______________ —Ä—É–±./–º¬≥', style='Normal')
                        doc.add_paragraph('   –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ: ______________________ —Ä—É–±.', style='Normal')
                        doc.add_paragraph()
                    
                    # –ü–æ–¥–ø–∏—Å–∏
                    signatures = settings.get("signatures", [])
                    for signature in signatures:
                        position = signature.get("position", "")
                        name = signature.get("name", "")
                        if position and name:
                            doc.add_paragraph(f'{position} {name}\t/____________/', style='Normal')
                    
                    doc.add_paragraph('–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ:', style='Normal')
                    doc.add_paragraph('–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä ___________________/________________/', style='Normal')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    safe_name = re.sub(r'[\\/*?:"<>|]', "", fulname)
                    file_name = f"{safe_name}_{month_name}_{year}_—Ä–µ–µ—Å—Ç—Ä.docx"
                    file_path = os.path.join(month_folder_path, file_name)
                    doc.save(file_path)
                    
                    self.reports_status_text.insert("end", f"   ‚úÖ –†–µ–µ—Å—Ç—Ä —Å–æ–∑–¥–∞–Ω: {file_name}\n")
                    successful_count += 1
                    
                except Exception as e:
                    self.reports_status_text.insert("end", f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}\n")
                    failed_count += 1
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.reports_status_text.insert("end", f"\n{'='*50}\n")
            self.reports_status_text.insert("end", f"üìä –ò–¢–û–ì–ò –ì–ï–ù–ï–†–ê–¶–ò–ò:\n")
            self.reports_status_text.insert("end", f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {successful_count}\n")
            self.reports_status_text.insert("end", f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n")
            self.reports_status_text.insert("end", f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {month_folder_path}\n")
            
            if successful_count > 0:
                self.reports_status_text.insert("end", f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")
            else:
                self.reports_status_text.insert("end", f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞\n")
            
        except Exception as e:
            self.reports_status_text.insert("end", f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n")
            import traceback
            traceback.print_exc()

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
        try:
            self.root.mainloop()
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            if hasattr(self, 'db') and self.db:
                self.db.close_connection()


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = SqliteDB()
        db.create_table_abonent()
        db.create_table_monthly_data()
        db.close_connection()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Window(800, 600)
        app.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        CTkMessagebox(title="–û—à–∏–±–∫–∞", 
                     message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {str(e)}",
                     icon="cancel")